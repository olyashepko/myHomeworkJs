// Задачи
// 1
// Состав смузи

// var liquids = ['вода', 'молоко', 'сок', 'чай', 'йогурт'];
// var fruits = ['киви', 'банан', 'персик', 'манго', 'груша', 'ананас'];
// var greens = ['мята', 'шпинат', 'руккола', 'петрушка', 'базилик'];

// Выбор посетителя

// var chosenLiquid = 1;
// var chosenFruit = 3;
// var chosenGreen = 2;

// Заказ

// var order = '';
// function makeOrder() {
    
//     order ="Основа - "+liquids[chosenLiquid-1]+" ,Фрукт- "+fruits[chosenFruit-1]+" ,Зелень - "+greens[chosenGreen-1];
    
//     console.log(order);
// }
// makeOrder();


/*
    Напиши программу, которая формирует заказ в виде строки.
    Массив с вариантами основы для смузи записан в переменную liquids.
    Массив с фруктами находится в переменной fruits.
    Массив с зеленью записан в переменную greens.
    Выбор посетителя записан в виде чисел в переменные chosenLiquid (индекс выбранной основы для смузи), 
    chosenFruit (выбранный фрукт), chosenGreen (выбранная зелень).
    Обрати внимание, что посетители выбирают пункты в электронном меню, где нумерация начинается с единицы, 
    а не с нуля, как в массивах. Учти это при решении.
    Собери строку с заказом посетителя вида 'Основа — ' + основа для смузи + ', фрукт — ' + выбранный фрукт + ', зелень — ' + выбранная зелень.
    Запиши результат в переменную order.
*/

// 2
// var groceries = ['чай', 'шпроты', 'печенье', 'сахар', 'чипсы'];
// var shoppingList = groceries.join(", ");
// console.log(shoppingList);


/*
    Напиши программу, которая составит из элементов массива список покупок.
    В результате должна получиться строка с элементами массива через запятую вида 'элемент, элемент, элемент'.
    Каждый элемент должен быть отделён запятой, точка в конце строки не нужна. И помни про пробелы перед всеми словами, кроме первого.
    Элементы должны добавляться в строку последовательно, начиная с самого первого элемента массива, заканчивая последним.
    Массив с покупками записан в переменную groceries.
    Строку со списком покупок записывай в переменную shoppingList.
*/

// 3
// var luggage = ['пакет', 'мяч', 'тапки', 'когтеточка', 'коробка', 'миска', 'мята'];
// var startIndex = 2;
// var quantity = 3;
// var chosenLuggage = [];
// for (i= startIndex;chosenLuggage.length<3;i++){
//     chosenLuggage.push(luggage[i]);
// }
 
// console.log(chosenLuggage);
/*
    Напиши программу, которая на основе одного массива c багажом создаст другой.
    Изначальный массив с багажом записан в переменную luggage.
    Индекс элемента, с которого нужно начинать добавлять багаж (включая этот элемент), записан в переменную startIndex.
    Количество элементов, которые нужно взять с собой записано в переменную quantity.
    Собери новый массив на основе изначального, добавляя элементы последовательно (от меньшего индекса к большему). 
    Выбирай определённое количество элементов из массива luggage, 
    начиная с элемента с индексом startIndex, и добавляй их в новый массив. 
    Он должен быть записан в переменную chosenLuggage.
    Для добавления элементов в новый массив можешь использовать команду array.push().
*/

// 4

// var books = ['Улисс', 'Маугли', 'Сияние', 'Ревизор', 'Гамлет', 'Обломов', 'Дюймовочка', 'Шантарам', 'Вий', 'Сильмариллион', 'Оно'];
// var minNumber = 3;
// var maxNumber = 5; 
// var filteredBooks = books.filter (function(item){
//     if (item.length >=minNumber && item.length <=maxNumber){
//         return item;
//     }
// })

// console.log(filteredBooks);
// Напиши программу, которая на основе одного массива с книгами создаст другой.
// Массив книг записан в переменную books.
// В переменную minNumber записано минимальное количество букв в названии книги (включительно),
// а в переменную maxNumber записано максимальное число букв (включительно). Чтобы найти количество букв в названии, используй команду строка.length.
// Собери новый массив на основе изначального, добавляя элементы последовательно (от меньшего индекса к большему).
// Результат запиши в переменную filteredBooks.

// 5

// Алфавит
// var symbols = ['А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ё', 'Ж', 'З', 'И', 'Й', 'К', 'Л', 
// 'М', 'Н', 'О', 'П', 'Р', 'С', 'Т', 'У', 'Ф', 'Х', 'Ц', 'Ч', 'Ш', 'Щ', 'Ъ', 'Ы',
// 'Ь', 'Э', 'Ю', 'Я', 'а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к',
// 'л', 'м', 'н', 'о', 'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ',
// 'ы', 'ь', 'э', 'ю', 'я', ' ', '.', ',', '—', '!'];

// // Смещение
// var shift = 10;
// // Закодированное сообщение
// var encodedMessage = [8, 28, 36, 52, 56, 40, 23, 31, 56, 39, 38, 28, 48, 52, 58, 56, 38, 27, 32, 37, 56, 40, 23, 31, 56, 39, 38, 41, 39, 32, 57];
// // Раскодированное сообщение
// var decodedMessage="";
// for (i=0;i<encodedMessage.length;i++){
//  if (encodedMessage[i+shift]>(symbols.length+1))   {
//     var newMessage= symbols[encodedMessage[i]+shift-(symbols.length+1)];
//     decodedMessage +=newMessage;
//  } else {
//     var newMessage= symbols[encodedMessage[i]+10];
//     decodedMessage +=newMessage;
//  }
// }
// console.log(symbols.length);
// console.log (decodedMessage);
//     Мне нужна новая программа расшифровки.
//     Есть массив symbols, в котором хранится алфавит (буквы и другие символы).
//     Есть массив encodedMessage, в котором хранится зашифрованное сообщение. Каждый элемент этого массива — это индекс символа из массива symbols.
//     Индексы сдвинуты на величину в переменной shift. Пример: элемент из зашифрованного массива равен единице,
//     значит с учётом сдвига десять это символ с индексом одиннадцать в массиве с алфавитом, то есть «К».
//     Программа дешифровки должна переводить элементы из массива с шифровкой в символы из массива алфавита и 
//     склеивать из них расшифрованную строку. Эту строку храним в переменной decodedMessage.
//     Если индекс со смещением выходит за пределы алфавита, то нужно вычесть из этого индекса длину алфавита 
//     (большие индексы шифруют символы в начале алфавита).

//     В основе шифра Цезаря лежит простой принцип: сдвиг символов в исходном алфавите.
//     Например, если взять все буквы русского алфавита, записать их по порядку: «абвгдеёжзийклмнопрстуфхцчшщъыьэюя»,
//     взять какое-нибудь сообщение, например «привет», найти в сообщении все буквы и сдвинуть их на какое-нибудь расстояние,
//     например, на две буквы вперёд, так, чтобы «п» стало «с», «р» стало «т» и так далее, то зашифрованное сообщение будет «сткджф». 
//     Зашифрованное сообщение не сможет прочитать никто, кроме тех, кто знает какой алфавит использовался и на сколько символов был сделан сдвиг в шифре.
// */


// 6
// Напишите функцию camelize(str), которая преобразует строки вида «my-short-string» в «myShortString».
// То есть, дефисы удаляются, а все слова после них получают заглавную букву.
// Например:
// camelize("background-color") == 'backgroundColor';
// camelize("list-style-image") == 'listStyleImage';
// camelize("-webkit-transition") == 'WebkitTransition';
// Такая функция полезна при работе с CSS.
// P.S. Вам пригодятся методы строк charAt, split и toUpperCase.
// function camelize (str) {
//     var arr = str.split("-");
//     for (var i = 1; i<arr.length;i++){
//         arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].slice(1);
//     }
//     return arr.join("");
// }
// console.log(camelize("list-style-image"));
// 7
// Сортировать в обратном порядке
// Как отсортировать массив чисел в обратном порядке?
// var arr = [5, 2, 1, -10, 8];
// function compareNumber(a,b){
//     return b-a;
// }
// arr = arr.sort(compareNumber);
// console.log( arr );

// 8
// Скопировать и отсортировать массив
// Есть массив строк arr. Создайте массив arrSorted – из тех же элементов, но отсортированный.
// Исходный массив не должен меняться.
// var arr = ["HTML", "JavaScript", "CSS"];
// var arrSorted=arr.concat().sort();


// console.log( arrSorted ); // CSS, HTML, JavaScript
// console.log( arr ); // HTML, JavaScript, CSS (без изменений)
// Постарайтесь сделать код как можно короче.

// 9

// Напишите код, который отсортирует массив объектов people по полю age.
// Например:
var vasya = { name: "Вася", age: 23 };
var masha = { name: "Маша", age: 18 };
var vovochka = { name: "Вовочка", age: 6 };
var people = [ vasya , masha , vovochka ];
people.sort (function (a,b) {
    
    return people[a][1]-people[b][1];
    
}      
)
// people.sort (function(a,b){
//         return (a[1] === b[1] ? 0 :
//             (a[1]<b[1] ? 1 :-1));
//     }
// )
console.log(people);

// // теперь people: [vovochka, masha, vasya]
console.log (people[0].age) // 6